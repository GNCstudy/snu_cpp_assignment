* DFS와 Stack 

 DFS(깊이 우선 탐색)를 구현하기 위해서는 Stack을 이용한다.
탐색을 위해서 다음 Node로 이동한다고 가정하자. Stack의 제일 윗쪽 부분은 가장 늦게 입력된 값이다.
그러므로 Stack의 제일 윗쪽 부분은 현재 위치에 해당하는 Node라고 볼 수 있다.
Stack에서 이 부분을 Pop하고 다음 Node가 될 수 있는 값들로 Stack을 쌓는다.
변경된 Stack에서 맨 위에 쌓여있는 부분이 이전 과정에서의 이동하고자 했던 다음 위치의 Node라고 볼 수 있다.
즉 새롭게 설정된 현재 위치에 해당하는 Node이다.
변경된 위치에서도 위 과정을 반복한다.
끝까지 탐색을 완료를 하고 난 뒤 Pop을 했던 순서(1) 
그리고 마지막 Stack에서 위에서부터의 순서(2)를 서로 이어준다. 
이어준 순서가 탐색 경로가 된다.(1,2)


* BFS와 Queue

 BFS(넓이 우선 탐색)를 구현하기 위해서는 Queue를 이용한다.
탐색을 위해서 다음 Node로 이동한다고 가정하자.
Queue의 제일 앞쪽 부분은 현재의 Queue 중에서 가장 먼저 입력된 값이다.
그러므로 Queue의 제일 앞쪽 부분은 현재 위치에 해당하는 Node라고 볼 수 있다.
Queue에서 이 부분을 Pop하고 다음 Node가 될 수 있는 값들로 Enqueue를 해준다.
변경된 Queue에서 맨 앞에 놓여있는 부분이 이전 과정에서의 이동하고자 했던 다음 위치의 Node라고 볼 수 있다.
즉 새롭게 설정된 현재 위치에 해당하는 Node이다.
변경된 위치에서도 위 과정을 반복한다.
끝까지 탐색을 완료를 하고 난 뒤 Pop을 했던 순서(1) 
그리고 마지막 Queue에서 앞에서부터의 순서(2)를 서로 이어준다. 
이어준 순서가 탐색 경로가 된다.(1,2)
